/* tslint:disable */
/* eslint-disable */
/**
 * Chess2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Color } from './Color';
import {
    ColorFromJSON,
    ColorFromJSONTyped,
    ColorToJSON,
} from './Color';
import type { PieceType } from './PieceType';
import {
    PieceTypeFromJSON,
    PieceTypeFromJSONTyped,
    PieceTypeToJSON,
} from './PieceType';

/**
 * 
 * @export
 * @interface Piece
 */
export interface Piece {
    /**
     * 
     * @type {PieceType}
     * @memberof Piece
     */
    pieceType: PieceType;
    /**
     * 
     * @type {Color}
     * @memberof Piece
     */
    color: Color;
    /**
     * 
     * @type {number}
     * @memberof Piece
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof Piece
     */
    y: number;
}

/**
 * Check if a given object implements the Piece interface.
 */
export function instanceOfPiece(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pieceType" in value;
    isInstance = isInstance && "color" in value;
    isInstance = isInstance && "x" in value;
    isInstance = isInstance && "y" in value;

    return isInstance;
}

export function PieceFromJSON(json: any): Piece {
    return PieceFromJSONTyped(json, false);
}

export function PieceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Piece {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pieceType': PieceTypeFromJSON(json['piece_type']),
        'color': ColorFromJSON(json['color']),
        'x': json['x'],
        'y': json['y'],
    };
}

export function PieceToJSON(value?: Piece | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'piece_type': PieceTypeToJSON(value.pieceType),
        'color': ColorToJSON(value.color),
        'x': value.x,
        'y': value.y,
    };
}

