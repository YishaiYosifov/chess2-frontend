/* tslint:disable */
/* eslint-disable */
/**
 * Chess2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Player } from './Player';
import {
    PlayerFromJSON,
    PlayerFromJSONTyped,
    PlayerToJSON,
} from './Player';

/**
 * 
 * @export
 * @interface LiveGame
 */
export interface LiveGame {
    /**
     * 
     * @type {string}
     * @memberof LiveGame
     */
    token: string;
    /**
     * 
     * @type {Player}
     * @memberof LiveGame
     */
    playerWhite: Player;
    /**
     * 
     * @type {Player}
     * @memberof LiveGame
     */
    playerBlack: Player;
    /**
     * 
     * @type {number}
     * @memberof LiveGame
     */
    turnPlayerId: number;
    /**
     * 
     * @type {string}
     * @memberof LiveGame
     */
    fen: string;
}

/**
 * Check if a given object implements the LiveGame interface.
 */
export function instanceOfLiveGame(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "playerWhite" in value;
    isInstance = isInstance && "playerBlack" in value;
    isInstance = isInstance && "turnPlayerId" in value;
    isInstance = isInstance && "fen" in value;

    return isInstance;
}

export function LiveGameFromJSON(json: any): LiveGame {
    return LiveGameFromJSONTyped(json, false);
}

export function LiveGameFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveGame {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'token': json['token'],
        'playerWhite': PlayerFromJSON(json['player_white']),
        'playerBlack': PlayerFromJSON(json['player_black']),
        'turnPlayerId': json['turn_player_id'],
        'fen': json['fen'],
    };
}

export function LiveGameToJSON(value?: LiveGame | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'token': value.token,
        'player_white': PlayerToJSON(value.playerWhite),
        'player_black': PlayerToJSON(value.playerBlack),
        'turn_player_id': value.turnPlayerId,
        'fen': value.fen,
    };
}

