/* tslint:disable */
/* eslint-disable */
/**
 * Chess2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GameResult } from './GameResult';
import {
    GameResultFromJSON,
    GameResultFromJSONTyped,
    GameResultToJSON,
} from './GameResult';
import type { SimpleUserOut } from './SimpleUserOut';
import {
    SimpleUserOutFromJSON,
    SimpleUserOutFromJSONTyped,
    SimpleUserOutToJSON,
} from './SimpleUserOut';
import type { Variant } from './Variant';
import {
    VariantFromJSON,
    VariantFromJSONTyped,
    VariantToJSON,
} from './Variant';

/**
 * 
 * @export
 * @interface GameResults
 */
export interface GameResults {
    /**
     * 
     * @type {string}
     * @memberof GameResults
     */
    token: string;
    /**
     * 
     * @type {SimpleUserOut}
     * @memberof GameResults
     */
    userWhite: SimpleUserOut | null;
    /**
     * 
     * @type {SimpleUserOut}
     * @memberof GameResults
     */
    userBlack: SimpleUserOut | null;
    /**
     * 
     * @type {GameResult}
     * @memberof GameResults
     */
    results: GameResult;
    /**
     * 
     * @type {Variant}
     * @memberof GameResults
     */
    variant: Variant;
    /**
     * 
     * @type {number}
     * @memberof GameResults
     */
    timeControl: number;
    /**
     * 
     * @type {number}
     * @memberof GameResults
     */
    increment: number;
    /**
     * 
     * @type {Date}
     * @memberof GameResults
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the GameResults interface.
 */
export function instanceOfGameResults(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "userWhite" in value;
    isInstance = isInstance && "userBlack" in value;
    isInstance = isInstance && "results" in value;
    isInstance = isInstance && "variant" in value;
    isInstance = isInstance && "timeControl" in value;
    isInstance = isInstance && "increment" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function GameResultsFromJSON(json: any): GameResults {
    return GameResultsFromJSONTyped(json, false);
}

export function GameResultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameResults {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'token': json['token'],
        'userWhite': SimpleUserOutFromJSON(json['user_white']),
        'userBlack': SimpleUserOutFromJSON(json['user_black']),
        'results': GameResultFromJSON(json['results']),
        'variant': VariantFromJSON(json['variant']),
        'timeControl': json['time_control'],
        'increment': json['increment'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function GameResultsToJSON(value?: GameResults | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'token': value.token,
        'user_white': SimpleUserOutToJSON(value.userWhite),
        'user_black': SimpleUserOutToJSON(value.userBlack),
        'results': GameResultToJSON(value.results),
        'variant': VariantToJSON(value.variant),
        'time_control': value.timeControl,
        'increment': value.increment,
        'created_at': (value.createdAt.toISOString()),
    };
}

