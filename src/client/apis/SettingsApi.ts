/* tslint:disable */
/* eslint-disable */
/**
 * Chess2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseUserProfile,
  ErrorResponseStr,
  HTTPValidationError,
  UserOut,
} from '../models/index';
import {
    BaseUserProfileFromJSON,
    BaseUserProfileToJSON,
    ErrorResponseStrFromJSON,
    ErrorResponseStrToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UserOutFromJSON,
    UserOutToJSON,
} from '../models/index';

export interface ChangeEmailRequest {
    body: string;
}

export interface ChangePasswordRequest {
    body: string;
}

export interface ChangeUsernameRequest {
    body: string;
}

export interface UpdateProfileRequest {
    baseUserProfile: BaseUserProfile;
}

export interface UploadProfilePictureRequest {
    pfp: Blob;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Update the email and send an email verification. This will also unverify the user email.  Requires a fresh JWT token.
     * Change Email
     */
    async changeEmailRaw(requestParameters: ChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOut>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearerCookie", []);
        }

        const response = await this.request({
            path: `/settings/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutFromJSON(jsonValue));
    }

    /**
     * Update the email and send an email verification. This will also unverify the user email.  Requires a fresh JWT token.
     * Change Email
     */
    async changeEmail(requestParameters: ChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOut> {
        const response = await this.changeEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hash the password and update it. Requires a fresh JWT token.
     * Change Password
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOut>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearerCookie", []);
        }

        const response = await this.request({
            path: `/settings/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutFromJSON(jsonValue));
    }

    /**
     * Hash the password and update it. Requires a fresh JWT token.
     * Change Password
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOut> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the username
     * Change Username
     */
    async changeUsernameRaw(requestParameters: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOut>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearerCookie", []);
        }

        const response = await this.request({
            path: `/settings/username`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutFromJSON(jsonValue));
    }

    /**
     * Update the username
     * Change Username
     */
    async changeUsername(requestParameters: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOut> {
        const response = await this.changeUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserOut>> {
        if (requestParameters.baseUserProfile === null || requestParameters.baseUserProfile === undefined) {
            throw new runtime.RequiredError('baseUserProfile','Required parameter requestParameters.baseUserProfile was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearerCookie", []);
        }

        const response = await this.request({
            path: `/settings/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BaseUserProfileToJSON(requestParameters.baseUserProfile),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserOutFromJSON(jsonValue));
    }

    /**
     * Update Profile
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserOut> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a user\'s profile picture. The picture must be < 1mb and a valid image.
     * Upload Profile Picture
     */
    async uploadProfilePictureRaw(requestParameters: UploadProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.pfp === null || requestParameters.pfp === undefined) {
            throw new runtime.RequiredError('pfp','Required parameter requestParameters.pfp was null or undefined when calling uploadProfilePicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearerCookie", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.pfp !== undefined) {
            formParams.append('pfp', requestParameters.pfp as any);
        }

        const response = await this.request({
            path: `/settings/upload-profile-picture`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Change a user\'s profile picture. The picture must be < 1mb and a valid image.
     * Upload Profile Picture
     */
    async uploadProfilePicture(requestParameters: UploadProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.uploadProfilePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
